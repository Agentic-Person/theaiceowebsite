{
  "name": "AI CEO Enterprise Chatbot & Voice System",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-chat",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              }
            ]
          }
        }
      },
      "id": "webhook-entry",
      "name": "Webhook Entry Point",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [100, 400],
      "webhookId": "ai-chat-webhook"
    },
    {
      "parameters": {
        "content": "## ðŸš€ AI CEO Enterprise Chatbot System\n\n### Features:\n- **Multi-modal**: Text & Voice support\n- **Supabase CRM**: User tracking & history\n- **Voice AI**: ElevenLabs/Wispr integration\n- **Lead Capture**: Email for PDF downloads\n- **Analytics**: Full conversation tracking\n- **Smart Routing**: Based on user intent\n\n### Setup Required:\n1. Configure Supabase credentials\n2. Add OpenAI API key\n3. Set up ElevenLabs/Wispr API\n4. Configure SMTP for emails\n5. Activate workflow\n\n### Database Schema (Supabase):\n```sql\n-- Users table\nCREATE TABLE users (\n  id UUID PRIMARY KEY,\n  email TEXT,\n  name TEXT,\n  company TEXT,\n  created_at TIMESTAMP,\n  last_seen TIMESTAMP\n);\n\n-- Conversations table\nCREATE TABLE conversations (\n  id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(id),\n  session_id TEXT,\n  message TEXT,\n  response TEXT,\n  mode TEXT,\n  timestamp TIMESTAMP\n);\n\n-- Leads table\nCREATE TABLE leads (\n  id UUID PRIMARY KEY,\n  email TEXT UNIQUE,\n  pdf_downloaded BOOLEAN,\n  subscribed BOOLEAN,\n  created_at TIMESTAMP\n);\n```",
        "height": 600,
        "width": 400,
        "color": 7
      },
      "id": "documentation",
      "name": "Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-300, 100]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.mode }}",
                    "rightValue": "voice",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message }}",
                    "rightValue": "download",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "lead_capture"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "router",
      "name": "Intent Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [300, 400]
    },
    {
      "parameters": {
        "operation": "get",
        "table": "users",
        "filters": {
          "conditions": [
            {
              "keyName": "email",
              "keyValue": "={{ $json.email || $json.sessionId }}",
              "condition": "equals"
            }
          ]
        },
        "options": {}
      },
      "id": "check-user",
      "name": "Check Existing User",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [500, 200],
      "credentials": {
        "supabaseApi": {
          "id": "2",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "table": "users",
        "columns": "id, email, name, company, created_at, last_seen",
        "options": {}
      },
      "id": "create-user",
      "name": "Create New User",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [700, 100],
      "credentials": {
        "supabaseApi": {
          "id": "2",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "table": "conversations",
        "columns": "id, user_id, session_id, message, response, mode, timestamp",
        "options": {}
      },
      "id": "store-conversation",
      "name": "Store Conversation",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1400, 400],
      "credentials": {
        "supabaseApi": {
          "id": "2",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.elevenlabs.io/v1/text-to-speech/{{ $json.voice_id || 'EXAVITQu4vr4xnSDxMaL' }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "={{ $credentials.elevenLabsApiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"text\": \"{{ $json.ai_response }}\",\n  \"model_id\": \"eleven_monolingual_v1\",\n  \"voice_settings\": {\n    \"stability\": 0.5,\n    \"similarity_boost\": 0.5\n  }\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "elevenlabs-tts",
      "name": "ElevenLabs TTS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.wisprflow.com/v1/speech-to-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.wisprApiKey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "audio",
              "value": "={{ $json.audio_data }}"
            },
            {
              "name": "language",
              "value": "en"
            }
          ]
        },
        "options": {}
      },
      "id": "wispr-stt",
      "name": "Wispr STT",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [600, 600]
    },
    {
      "parameters": {
        "model": "gpt-4-turbo-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an AI Sales Professional for The AI CEO. Context from CRM:\nUser: {{ $('check-user').item.json.name || 'New User' }}\nCompany: {{ $('check-user').item.json.company || 'Unknown' }}\nPrevious Interactions: {{ $('get-history').item.json.count || 0 }}\n\nCore Offerings:\n- Custom AI Agents with memory\n- n8n workflow automation\n- Voice AI solutions\n- Prompt engineering (Prompt Surgeonâ„¢)\n- SMB-focused pricing\n\nAlways mention our free AI strategy session for qualified leads."
            },
            {
              "role": "user",
              "content": "={{ $json.message || $json.transcribed_text }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 500,
          "topP": 0.9,
          "frequencyPenalty": 0.3,
          "presencePenalty": 0.3
        }
      },
      "id": "openai-chat",
      "name": "OpenAI GPT-4",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.3,
      "position": [1000, 400],
      "credentials": {
        "openAiApi": {
          "id": "1",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "table": "conversations",
        "filters": {
          "conditions": [
            {
              "keyName": "session_id",
              "keyValue": "={{ $json.sessionId }}",
              "condition": "equals"
            }
          ]
        },
        "options": {
          "orderBy": {
            "values": [
              {
                "column": "timestamp",
                "direction": "DESC"
              }
            ]
          },
          "limit": 10
        }
      },
      "id": "get-history",
      "name": "Get Conversation History",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [800, 300],
      "credentials": {
        "supabaseApi": {
          "id": "2",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "ai@theaiceo.com",
        "toEmail": "={{ $json.email }}",
        "subject": "Your AI Strategy Guide from The AI CEO",
        "emailFormat": "html",
        "html": "<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; }\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }\n    .content { padding: 30px; background: #f7f7f7; }\n    .cta { background: #4CAF50; color: white; padding: 15px 30px; text-decoration: none; display: inline-block; margin: 20px 0; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>Welcome to The AI CEO</h1>\n      <p>Your AI Transformation Journey Starts Here</p>\n    </div>\n    <div class=\"content\">\n      <h2>Hi {{ $json.name || 'there' }},</h2>\n      <p>Thank you for your interest in transforming your business with AI!</p>\n      <p>Your exclusive AI Strategy Guide is attached to this email. This comprehensive guide covers:</p>\n      <ul>\n        <li>ðŸŽ¯ 5 Critical AI Implementation Mistakes to Avoid</li>\n        <li>ðŸ“Š ROI Calculator for AI Projects</li>\n        <li>ðŸ”§ Our Proven Implementation Framework</li>\n        <li>ðŸ’¡ Case Studies from Similar Businesses</li>\n      </ul>\n      <h3>Your Next Step:</h3>\n      <p>Schedule your free 30-minute AI Strategy Session to discuss:</p>\n      <ul>\n        <li>Your specific business challenges</li>\n        <li>Custom AI solutions tailored to your needs</li>\n        <li>Implementation roadmap and timeline</li>\n        <li>Expected ROI and success metrics</li>\n      </ul>\n      <a href=\"https://theaiceo.com/book-session\" class=\"cta\">Book Your Free Strategy Session</a>\n      <p>Best regards,<br>The AI CEO Team</p>\n    </div>\n  </div>\n</body>\n</html>",
        "attachments": "https://theaiceo.com/downloads/ai-strategy-guide.pdf",
        "options": {}
      },
      "id": "send-email",
      "name": "Send Welcome Email + PDF",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [1000, 100],
      "credentials": {
        "gmailOAuth2": {
          "id": "3",
          "name": "Gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "table": "leads",
        "columns": "email, pdf_downloaded, subscribed, created_at",
        "options": {}
      },
      "id": "capture-lead",
      "name": "Capture Lead",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [800, 100],
      "credentials": {
        "supabaseApi": {
          "id": "2",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare unified response format\nconst mode = $input.first().json.mode || 'text';\nconst isVoice = mode === 'voice';\n\nlet response = {\n  success: true,\n  sessionId: $input.first().json.sessionId,\n  timestamp: new Date().toISOString(),\n  mode: mode\n};\n\nif (isVoice) {\n  // Voice response\n  response.response = $('openai-chat').first().json.choices[0].message.content;\n  response.audio_url = $('elevenlabs-tts').first().json.url || null;\n  response.voice_id = $input.first().json.voice_id || 'default';\n} else {\n  // Text response\n  response.response = $('openai-chat').first().json.choices[0].message.content;\n}\n\n// Add user context if available\nif ($('check-user').first().json) {\n  response.user = {\n    name: $('check-user').first().json.name,\n    company: $('check-user').first().json.company,\n    isReturning: true\n  };\n}\n\n// Add analytics data\nresponse.analytics = {\n  responseTime: Date.now() - new Date($input.first().json.timestamp).getTime(),\n  conversationLength: $('get-history').first().json?.length || 0,\n  intent: $input.first().json.intent || 'general'\n};\n\nreturn response;"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Powered-By",
                "value": "The-AI-CEO"
              }
            ]
          }
        }
      },
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1600, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://analytics.theaiceo.com/track",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"event\": \"chat_interaction\",\n  \"sessionId\": \"{{ $json.sessionId }}\",\n  \"userId\": \"{{ $('check-user').item.json.id }}\",\n  \"properties\": {\n    \"mode\": \"{{ $json.mode }}\",\n    \"messageLength\": {{ $json.message.length }},\n    \"responseTime\": {{ $json.analytics.responseTime }},\n    \"intent\": \"{{ $json.intent }}\",\n    \"timestamp\": \"{{ $json.timestamp }}\"\n  }\n}",
        "options": {
          "timeout": 5000,
          "ignoreResponseErrors": true
        }
      },
      "id": "track-analytics",
      "name": "Track Analytics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1400, 600]
    },
    {
      "parameters": {
        "errorMessage": "={{ $json.error?.message || 'Service temporarily unavailable. Please try again.' }}",
        "responseCode": 500
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [1200, 700]
    }
  ],
  "connections": {
    "webhook-entry": {
      "main": [
        [
          {
            "node": "router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "router": {
      "main": [
        [
          {
            "node": "wispr-stt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "capture-lead",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "check-user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-user": {
      "main": [
        [
          {
            "node": "get-history",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create-user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-user": {
      "main": [
        [
          {
            "node": "get-history",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-history": {
      "main": [
        [
          {
            "node": "openai-chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wispr-stt": {
      "main": [
        [
          {
            "node": "check-user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai-chat": {
      "main": [
        [
          {
            "node": "format-response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "error-handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format-response": {
      "main": [
        [
          {
            "node": "store-conversation",
            "type": "main",
            "index": 0
          },
          {
            "node": "track-analytics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "elevenlabs-tts": {
      "main": [
        [
          {
            "node": "format-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "capture-lead": {
      "main": [
        [
          {
            "node": "send-email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-email": {
      "main": [
        [
          {
            "node": "check-user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "store-conversation": {
      "main": [
        [
          {
            "node": "webhook-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "track-analytics": {
      "main": [
        [
          {
            "node": "webhook-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-notification-workflow"
  },
  "versionId": "enterprise-v2",
  "meta": {
    "templateCreatedBy": "The AI CEO Development Team",
    "description": "Enterprise-grade chatbot with voice support, CRM integration, lead capture, and analytics",
    "documentationUrl": "https://docs.theaiceo.com/chatbot-setup"
  },
  "id": "enterprise-chatbot",
  "tags": [
    {
      "id": "1",
      "name": "production"
    },
    {
      "id": "2", 
      "name": "voice-enabled"
    },
    {
      "id": "3",
      "name": "crm-integrated"
    }
  ]
}